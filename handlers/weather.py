"""
Module instead for bot command "/weather"
"""

from telebot.types import Message, CallbackQuery
from loader import bot
from database.functions import get_user_city
from .city import change_city
from utils import weather_requests
from keyboards.inline import inline_keyboad_by_dict
from datetime import datetime as dt


@bot.message_handler(commands=["weather"])
def weather_start(message: Message) -> None:
    """
    Message handler which catching the command "/weather".
    Send a keyboard with choice of view a weather

    Args:
        message (Message): user's message
    """
    city_info = get_user_city(message.chat.id)
    if city_info:
        keyboard = inline_keyboad_by_dict(
            {
                "–ü–æ–≥–æ–¥–∞ —Å—å–æ–≥–æ–¥–Ω—ñ": "today",
                "–ù–∞—Å—Ç—É–ø–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏ (–ø–æ–≥–æ–¥–∏–Ω–Ω–æ)": "hourly",
                "10 –¥–Ω—ñ–≤": "10 days",
            }
        )
        bot.send_message(
            message.chat.id, "–Ø–∫ —Å–∞–º–µ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –ø–æ–≥–æ–¥—É?", reply_markup=keyboard
        )
    else:
        change_city(message)


@bot.callback_query_handler(func=lambda data: data.data in ("today", "hourly", "10 days"))
def get_weather(callback: CallbackQuery):
    """
    Function which catching callback from keyboard of choice the view a weather and returned a message with weather
    which user selected earlier.

    Args:
        callback (CallbackQuery): callback from inline keyboard
    """
    msg = bot.send_message(callback.message.chat.id, "–û–¥–Ω—É —Å–µ–∫—É–Ω–¥—É, –¥—ñ–∑–Ω–∞—é—Å—å –ø–æ–≥–æ–¥—É...")
    city = get_user_city(callback.from_user.id)

    if callback.data == "hourly":
        weather = weather_requests.get_weather_hourly(
            city.get("latitude"), city.get("longitude")
        )
        bot.delete_message(msg.chat.id, msg.id)
        if weather:
            text = ""
            text_template = (
                "{smile} {time} ({day})\n"
                "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞–°, –≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ {temp_like}¬∞–°\n"
                "üí¶ –í–æ–ª–æ–≥—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è: {humidity}%\n"
                "üîÜ –£–§-—ñ–Ω–¥–µ–∫—Å: {uv_index} –∑ 10 ({uv_description})\n"
                "–û–ø–∞–¥–∏: {precip_type} {precip_chance}% {precip_quantity}–º–º\n\n"
            )

            for hour in range(24):
                precip = weather.get("precipType")[hour]

                text += text_template.format(
                    smile="‚òÄÔ∏è" if weather.get("dayOrNight")[hour] == "D" else "üåô",
                    time=dt.fromisoformat(weather.get("validTimeLocal")[hour][:-5]).strftime("%H:%M"),
                    day=weather.get("dayOfWeek")[hour],
                    temp=weather.get("temperature")[hour],
                    temp_like=weather.get("temperatureFeelsLike")[hour],
                    humidity=weather.get("relativeHumidity")[hour],
                    uv_index=weather.get("uvIndex")[hour],
                    uv_description=weather.get("uvDescription")[hour],
                    precip_type="–î–æ—â üíß" if precip == "rain" else "–°–Ω—ñ–≥ ‚ùÑÔ∏è",
                    precip_chance=weather.get("precipChance")[hour],
                    precip_quantity=weather.get("qpf")[hour] if precip == "rain" else weather.get("qpfSnow")[hour]
                )
        else:
            text = "–°—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ üò≥"
        bot.send_message(callback.message.chat.id, text)

    elif callback.data == "today":
        weather = weather_requests.get_today_weather(
            city.get("latitude"), city.get("longitude")
        )
        bot.delete_message(msg.chat.id, msg.id)
        if weather:
            text = (
                "{day_part} –ü–æ–≥–æ–¥–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ({day}) –≤ {city_name}\n\n"
                "{description}\n\n"
                "‚¨áÔ∏è –¢–∏—Å–∫: {pressure} –º–±–∞—Ä\n\n"
                "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞—Ä–∞–∑: {temp}¬∞–°, –≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ {temp_like}¬∞–°\n\n"
                "üå° –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞: {temp_min}¬∞–°, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ {temp_max}¬∞–°\n\n"
                "üí¶ –í–æ–ª–æ–≥—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è: {humidity}%\n\n"
                "üîÜ –£–§-—ñ–Ω–¥–µ–∫—Å: {uv_index} –∑ 10\n\n"
                "üëÄ –í–∏–¥–∏–º—ñ—Å—Ç—å: {visibility}\n\n"
                "üíß –¢–æ—á–∫–∞ —Ä–æ—Å–∏: {dew_point}¬∞–°"
            ).format(
                day_part="‚òÄÔ∏è" if weather.get("dayOrNight") == "D" else "üåô",
                day=weather.get("dayOfWeek"),
                city_name=city.get("city_name"),
                description=weather.get("wxPhraseLong"),
                pressure=weather.get("pressureMeanSeaLevel"),
                temp=weather.get("temperature"),
                temp_like=weather.get("temperatureFeelsLike"),
                temp_min=weather.get("temperatureMin24Hour"),
                temp_max=weather.get("temperatureMax24Hour"),
                humidity=weather.get("relativeHumidity"),
                uv_index=weather.get("uvIndex"),
                visibility=weather.get("visibility"),
                dew_point=weather.get("temperatureDewPoint")
            )
        else:
            text = "–°—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ üò≥"

        bot.send_message(callback.message.chat.id, text)

    elif callback.data == "10 days":
        weather = weather_requests.get_10_days_weather(
            city.get("latitude"), city.get("longitude")
        )
        bot.delete_message(msg.chat.id, msg.id)
        if weather:
            text_template = (
                "{smile} {daypart_name}\n"
                "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞–°\n"
                "‚òÅÔ∏è –•–º–∞—Ä–Ω—ñ—Å—Ç—å: {clouds}%\n"
                "üîÜ –£–§-—ñ–Ω–¥–µ–∫—Å: {uv_index} –∑ 10\n"
                "–û–ø–∞–¥–∏: {precip_type} {precip_chance}% {precip_quantity}–º–º\n"
                "{description}\n\n"
            )

            for day in range(0, 20, 2):
                text = ""
                night = day + 1

                if weather.get("dayOrNight")[day]:
                    precip = weather.get("precipType")[day]
                    text += text_template.format(
                        daypart_name=weather.get("daypartName")[day],
                        smile="‚òÄÔ∏è",
                        temp=weather.get("temperature")[day],
                        clouds=weather.get("cloudCover")[day],
                        uv_index=weather.get("uvIndex")[day],
                        precip_chance=weather.get("precipChance")[day],
                        precip_type="–î–æ—â üíß" if precip == "rain" else "–°–Ω—ñ–≥ ‚ùÑÔ∏è",
                        precip_quantity=weather.get("qpf")[day] if precip == 'rain'
                        else weather.get("qpfSnow")[day],
                        description=weather.get("wxPhraseLong")[day]
                    )

                if weather.get("dayOrNight")[night]:
                    precip = weather.get("precipType")[night]
                    text += text_template.format(
                        daypart_name=weather.get("daypartName")[night],
                        smile="üåô",
                        temp=weather.get("temperature")[night],
                        clouds=weather.get("cloudCover")[night],
                        uv_index=weather.get("uvIndex")[night],
                        precip_chance=weather.get("precipChance")[night],
                        precip_type="–î–æ—â üíß" if weather.get("precipType")[night] == "rain" else "–°–Ω—ñ–≥ ‚ùÑÔ∏è",
                        precip_quantity=weather.get("qpf")[night] if precip == 'rain'
                        else weather.get("qpfSnow")[night],
                        description=weather.get("wxPhraseLong")[night],
                    )
                bot.send_message(callback.message.chat.id, text)
        else:
            bot.send_message(callback.message.chat.id, "–°—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ üò≥")
    weather_start(callback.message)
